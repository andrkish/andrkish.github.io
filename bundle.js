(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = exports.GameOptions = exports.Render = exports.State = void 0;
var CellState;
(function (CellState) {
    CellState[CellState["Empty"] = 0] = "Empty";
    CellState[CellState["Full"] = 1] = "Full";
})(CellState || (CellState = {}));
class State {
    constructor(rows, columns) {
        this.rows = rows;
        this.columns = columns;
        this.total = rows * columns;
        this.state = new Array(this.total);
        this.glider();
        this.randomize();
    }
    glider() {
        this.state[this.toIndex(1, 3)] = CellState.Full;
        this.state[this.toIndex(2, 4)] = CellState.Full;
        this.state[this.toIndex(3, 2)] = CellState.Full;
        this.state[this.toIndex(3, 3)] = CellState.Full;
        this.state[this.toIndex(3, 4)] = CellState.Full;
    }
    wrapPoint(p, total) {
        return (p + total) % total;
    }
    isLive(row, column) {
        const wRow = this.wrapPoint(row, this.rows);
        const wColumn = this.wrapPoint(column, this.columns);
        const index = this.toIndex(wRow, wColumn);
        return this.state[index] == CellState.Full ? 1 : 0;
    }
    nCount(index) {
        const { row, column } = this.toPoint(index);
        const fn = this.isLive.bind(this);
        return fn(row - 1, column - 1) + fn(row - 1, column) + fn(row - 1, column + 1) +
            fn(row, column - 1) + fn(row, column + 1) +
            fn(row + 1, column - 1) + fn(row + 1, column) + fn(row + 1, column + 1);
    }
    doStep() {
        //window.logger.log('step');
        const newState = new Array(this.total);
        for (let i = 0; i < this.total; i++) {
            const live = this.nCount(i);
            if (this.state[i] == CellState.Full) {
                if (live == 2 || live == 3) {
                    newState[i] = CellState.Full;
                }
                else {
                    newState[i] = CellState.Empty;
                }
            }
            else {
                if (live == 3) {
                    newState[i] = CellState.Full;
                }
                else {
                    newState[i] = CellState.Empty;
                }
            }
        }
        this.state = newState;
    }
    randomize() {
        for (let i = 0; i < this.total; i++) {
            const r = Math.random();
            this.state[i] = r > 0.9 ?
                CellState.Full :
                CellState.Empty;
        }
    }
    toPoint(index) {
        const row = Math.floor(index / this.columns);
        const column = index % this.columns;
        return { row: row, column: column };
    }
    toIndex(row, column) {
        return row * this.columns + column;
    }
}
exports.State = State;
class Render {
    constructor(canvas, context, spritesheet, field, spriteSize) {
        this.canvas = canvas;
        this.context = context;
        this.spritesheet = spritesheet;
        this.field = field;
        this.spriteSize = spriteSize;
    }
    clear() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    renderCell(x, y, s) {
        let sx = 0;
        const sy = 0;
        if (s == CellState.Full) {
            sx = this.field.width;
        }
        const sizeX = this.spriteSize.width;
        const sizeY = this.spriteSize.height;
        this.context.drawImage(this.spritesheet, sx, sy, sizeX, sizeY, x, y, this.field.width, this.field.height);
    }
}
exports.Render = Render;
class GameOptions {
    constructor(drawEmpty, skipFrames) {
        this.drawEmpty = drawEmpty;
        this.skipFrames = skipFrames;
    }
}
exports.GameOptions = GameOptions;
class Game {
    constructor(state, render, options) {
        this.state = state;
        this.render = render;
        this.options = options;
        this.frames = 0;
        this.update = () => {
            this.frames += 1;
            if (this.frames % this.options.skipFrames == 0) {
                this.frames = 0;
                this.state.doStep();
            }
            this.render.clear();
            const state = this.state;
            for (let i = 0; i < state.total; i++) {
                const p = state.toPoint(i);
                const x = p.column * this.render.field.width;
                const y = p.row * this.render.field.height;
                // don't render empty cells
                if (!this.options.drawEmpty && state.state[i] == CellState.Empty) {
                    continue;
                }
                this.render.renderCell(x, y, state.state[i]);
            }
            requestAnimationFrame(this.update);
        };
        this.update();
    }
}
exports.Game = Game;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
class Logger {
    log(msg) {
        console.log(msg);
    }
}
exports.Logger = Logger;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const engine_1 = require("./engine");
const setup_1 = require("./setup");
function create32x32(canvas, context, img) {
    const state = new engine_1.State(19, 25);
    const spriteSize = { width: 32, height: 32 };
    const fieldSize = { width: 32, height: 32 };
    const render = new engine_1.Render(canvas, context, img, fieldSize, spriteSize);
    const options = new engine_1.GameOptions(false, 1);
    new engine_1.Game(state, render, options);
}
function create1x1(canvas, context, img) {
    const state = new engine_1.State(608, 800);
    const spriteSize = { width: 1, height: 1 };
    const fieldSize = { width: 1, height: 1 };
    const render = new engine_1.Render(canvas, context, img, fieldSize, spriteSize);
    const options = new engine_1.GameOptions(false, 1);
    new engine_1.Game(state, render, options);
}
function initApp() {
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');
    const img = new Image();
    img.onload = function () {
        (0, setup_1.setup)();
        create1x1(canvas, context, img);
    };
    img.src = 'sprite1x1.png';
}
if (document.readyState == 'complete') {
    initApp();
}
else {
    window.onload = () => {
        initApp();
    };
}
},{"./engine":1,"./setup":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const logger_1 = require("./logger");
function setup() {
    window.logger = new logger_1.Logger();
}
exports.setup = setup;
},{"./logger":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
